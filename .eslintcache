[{"/Users/genie/Desktop/Dev/web-frontend/corona-map/src/App.js":"1","/Users/genie/Desktop/Dev/web-frontend/corona-map/src/index.js":"2","/Users/genie/Desktop/Dev/web-frontend/corona-map/src/components/Cards/Cards.jsx":"3","/Users/genie/Desktop/Dev/web-frontend/corona-map/src/components/CountryPicker/CountryPicker.jsx":"4","/Users/genie/Desktop/Dev/web-frontend/corona-map/src/components/Chart/Chart.jsx":"5","/Users/genie/Desktop/Dev/web-frontend/corona-map/src/components/index.js":"6","/Users/genie/Desktop/Dev/web-frontend/corona-map/src/api/index.js":"7"},{"size":1714,"mtime":1608959892186,"results":"8","hashOfConfig":"9"},{"size":147,"mtime":1608628419473,"results":"10","hashOfConfig":"9"},{"size":4219,"mtime":1608959341603,"results":"11","hashOfConfig":"9"},{"size":1593,"mtime":1608960200231,"results":"12","hashOfConfig":"9"},{"size":2840,"mtime":1608958570710,"results":"13","hashOfConfig":"9"},{"size":174,"mtime":1608627566489,"results":"14","hashOfConfig":"9"},{"size":1215,"mtime":1608799067175,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"tzttt0",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"/Users/genie/Desktop/Dev/web-frontend/corona-map/src/App.js",[],"/Users/genie/Desktop/Dev/web-frontend/corona-map/src/index.js",[],["32","33"],"/Users/genie/Desktop/Dev/web-frontend/corona-map/src/components/Cards/Cards.jsx",[],"/Users/genie/Desktop/Dev/web-frontend/corona-map/src/components/CountryPicker/CountryPicker.jsx",[],"/Users/genie/Desktop/Dev/web-frontend/corona-map/src/components/Chart/Chart.jsx",["34"],"///////////////////////////////////////////////////////\n// * EXPLANATION\n///////////////////////////////////////////////////////\n// * IMPORT SECTION\n\nimport React, { useState, useEffect } from \"react\";\nimport { Line, Bar } from \"react-chartjs-2\";\n// error: failed to compile => solve by running `npm install --save chart.js` in cmd\n\n// import custom modules\nimport styles from \"./Chart.module.css\";\nimport { fetchDailyData } from \"../../api\";\n///////////////////////////////////////////////////////\n// * MAIN SECTION\n\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\n    // props: data, country(used for each country cases: bar chart)\n    const [dailyData, setDailyData] = useState([]);\n    // only used for global data\n\n    useEffect(() => {\n        // if 2nd param== empty array: makes useEffect behave as componentdidmount\n        const fetchAPI = async () => {\n            setDailyData(await fetchDailyData());\n        };\n        console.log(dailyData);\n        fetchAPI();\n    }, []);\n\n    const barChart = confirmed ? (\n        <Bar\n            data={{\n                labels: [\"Infected\", \"Recovered\", \"Deaths\"],\n                datasets: [\n                    {\n                        label: \"people\",\n                        backgroundColor: [\n                            // backgroundcolor와 labels는 대응됨\n                            \"rgba(0, 0, 255, 0.5)\",\n                            \"rgba(0, 255, 0, 0.5)\",\n                            \"rgba(255, 0, 0, 0.5)\",\n                        ],\n                        data: [confirmed.value, recovered.value, deaths.value],\n                    },\n                ],\n            }}\n            options={{\n                legend: { display: false },\n                title: { display: true, text: `Current state in ${country}` },\n            }}\n        ></Bar>\n    ) : null;\n\n    const lineChart = dailyData.length ? (\n        <Line\n            data={{\n                labels: dailyData.map(({ date }) => date),\n                datasets: [\n                    {\n                        data: dailyData.map(({ confirmed }) => confirmed),\n                        label: \"Infected\",\n                        borderColor: \"#3333ff\",\n                        fill: true,\n                    },\n                    {\n                        data: dailyData.map(({ deaths }) => deaths),\n                        label: \"Deaths\",\n                        borderColor: \"red\",\n                        backgroundColor: \"rgba(255, 0, 0, 0.5)\",\n                        fill: true,\n                    },\n                ],\n            }}\n        ></Line>\n    ) : null;\n\n    return (\n        <div className={styles.container}>{country ? barChart : lineChart}</div>\n    );\n};\n\n///////////////////////////////////////////////////////\n// * EXPORT SECTION\nexport default Chart;\n","/Users/genie/Desktop/Dev/web-frontend/corona-map/src/components/index.js",[],"/Users/genie/Desktop/Dev/web-frontend/corona-map/src/api/index.js",[],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":28,"column":8,"nodeType":"41","endLine":28,"endColumn":10,"suggestions":"42"},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dailyData'. Either include it or remove the dependency array.","ArrayExpression",["45"],"no-global-assign","no-unsafe-negation",{"desc":"46","fix":"47"},"Update the dependencies array to be: [dailyData]",{"range":"48","text":"49"},[1009,1011],"[dailyData]"]